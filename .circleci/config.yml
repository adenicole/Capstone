# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  docker: circleci/docker@1.6.0
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0
  
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: python:3.7.3-stretch
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    working_directory: ~/Capstone
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run lints!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
            
  security_check:  
    docker:
      - image: python:3.7.3-stretch
      
    working_directory: ~/Capstone
    
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
       
      - run:
          name: Security scan
          command: |
            python3 -m venv venv
            . venv/bin/activate
            safety check
            
  create_and_publish_image:
    docker:
      - image: python:3.7.3-stretch
      
    working_directory: ~/Capstone
    
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            
      - setup_remote_docker:
          version: 20.10.2
          
      - run:
          name: Install Docker
          command: |
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/debian \
            $(lsb_release -cs) \
            stable"
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io
      - run:
          name: Create and Publish image
          command: |
            docker build --tag capstone .
            docker image ls
            dockerpath=adenicole/capstone
            echo "Docker ID and Image: $dockerpath"
            cat $DOCKER_PASSWORD | docker login --username adenicole --password-stdin
            docker tag capstone $dockerpath
            docker push $dockerpath
            
            
  Infrastructure_and_Deployment:
    docker:
      - image: amazon/aws-cli
      
    working_directory: ~/Capstone
    
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      
      - run: 
          name: Install kubectl
          command: |
            wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      
      - run:
          name: Connect cluster
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name my-capstone-cluster 
            kubectl get svc
      
      - run:
          name: Deploy cluster and update image
          command: |
            kubectl apply -f cap_deploy.yml # May want to do this conditionally
            kubectl get svc
            kubectl get pods
            
      - run:
          name: rollout deployment 
          command: |
            kubectl rollout status deployment.apps/cap_deploy
            kubectl get all
  
workflows:
  cicd-pipeline:
    jobs:
      - build
      - security_check:
          requires:
            - build
      - create_and_publish_image:
          requires:
            - security_check
      - Infrastructure_and_Deployment:
          requires:
            - create_and_publish_image